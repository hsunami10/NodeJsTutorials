Package -> code that is managed and maintained with a package management system
Package management system -> software that automates installing and updating packages
    some manage ***dependencies*** -> code that another set of code depends on to function
        ex. if you use certain code in an app, the code is a dependency, since the app depends on it
        if something depends on it, then it's a dependency

Versioning -> specifying what version of a set of code this is, so others can track if a new version has come out, watch for new features,
              breaking changes -> a change is made in which old code does not work in 
Semantic Versioning (SemVer) -> implies that the version (numbers) mean something - semver.org
    basic core of semver: MAJOR.MINOR.PATCH
        ex. current version is 1.7.2
        bug fixed...version is 1.7.3 - code will work fine
        added new features...version is 1.8.0 - code will work fine
        major changes...version 2.0.0 - code might break 

Moment -> a package for manipulating and displaying dates

Install packages:
    make sure you are in the root folder of your directory
    1) Create a package.json file (for installing packages)
        go to the nodejs directory in the cmd/terminal
        -npm init
        -fill in information
            name - name of file
            scripts section in json file 
                command line commands - ex. "test" - npm test 
    2) npm install <packagename> --save
        npm will go to the npm registry, download the files with <packagename>
        --save -> notes what you're using in the app in the package.json file (save a reference)
        adds the "dependencies" section in json file 
        *if using a repo, only push the package.json, not the the package folder that you downloaded*